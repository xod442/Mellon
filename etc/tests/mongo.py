
'''
                _ _
                | | |
  _ __ ___   ___| | | ___  _ __
 | '_ ` _ \ / _ \ | |/ _ \| '_ \
 | | | | | |  __/ | | (_) | | | |
 |_| |_| |_|\___|_|_|\___/|_| |_|

Mellanox 2010 Switch configuration

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at

#  http://www.apache.org/licenses/LICENSE-2.0

# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# __author__ = "@netwookie"
# __credits__ = ["Rick Kauffman"]
# __license__ = "Apache2.0"
# __maintainer__ = "Rick Kauffman"
# __email__ = "rick@rickkauffman.com"

'''

import time

import requests
from pyarubaimc.auth import *
from pyarubaimc.alarms import *
from pyarubaimc.device import *
from pymongo import MongoClient

imc_user = "admin"
imc_passwd = "ilike2Rock@"
imc_host = "10.132.0.160"
varz = []
data = {}
dump = []
imc_test_url = 'http://'+imc_host+':8080'
config = {
    "username": "admin",
    "password": "siesta3",
    "server": "mongo",
}

connector = "mongodb://{}:{}@{}".format(config["username"], config["password"], config["server"])
client = MongoClient(connector)



auth = IMCAuth("http://", imc_host, "8080", imc_user, imc_passwd)
#print auth
count = 1
# Get real time alarms from IMC
print(auth)
alarms = get_alarms('admin', auth.creds, auth.url)
print('--------------get_alarms------<<<<<<<<<>>>>>>>>>>>----------------------')
print(len(alarms))
print(type(alarms))

mydb = client["test"]
known = mydb["imc_alarms"]
print(known)

mongo_alarm = {}

for alarm in alarms:
    if known.count_documents({ 'u_id': alarm['id'] }, limit = 1) == 0:
        print(alarm['id'])
        print('--------no record----------------------<<<<<<<<<>>>>>>>>>>>----------------------')

print('------------------------------<<<<<<<<<>>>>>>>>>>>----------------------')
'''
realtime = get_realtime_alarm('admin', auth.creds, auth.url)
print(realtime)
print(len(realtime))
print(type(realtime))

print('------------------------------<<<<<<<<<>>>>>>>>>>>----------------------')
print('------------------------------<<<<<<<<<>>>>>>>>>>>----------------------')
devices = get_all_devs(auth.creds, auth.url)
print(devices)
print(len(devices))
print(type(devices))
print('------------------------------<<<<<<<<<>>>>>>>>>>>----------------------')
print('------------------------------<<<<<<<<<>>>>>>>>>>>----------------------')

for item in devices:
    print(item['label'])

for alarm in alarms:

    print(alarm)

    # Build dictionary for Service Now incedent report

    priority = alarm['severity']
    short_description = "Generated by HPE IMC Alarm ID %s Host IP:%s" % (alarm['id'],alarm['deviceDisplay'])
    description = alarm['faultDesc']
    # Now we have to ensure the strings are not unicode, service now will return 400 if they are
    priority = priority.encode('utf-8')
    short_description = short_description.encode('utf-8')
    description = description.encode('utf-8')
    print(priority)
    data['priority'] = priority
    data['number'] = "IMC0000-"+str(alarm['id'])
    data['short_description'] = short_description
    data['description'] = description
    data = str(data)
    #print data
    # Write record to Service Now
    # Set proper headers
    headers = {"Content-Type":"application/json","Accept":"application/json"}
    print('sending request')
    # Do the HTTP POST to Snow
    #response = requests.post(snow_url, auth=(snow_user, snow_passwd), headers=headers ,data=data)
    #count = count + 1
    # Check for HTTP codes other than 200
    #if response.status_code != 201:
        #varz = [response.status_code, response.headers, response.json, snow_url, snow_user,snow_passwd, data, count]
        #print varz
    #data = {}

'''
print("finito!")
